import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

const GOOGLE_PLACES_API_KEY = process.env.GOOGLE_PLACES_API_KEY;
const EXCHANGE_RATE_API_KEY = process.env.EXCHANGE_RATE_API_KEY;

// Helper function to get location details from Google Places API
const getLocationDetails = async (location) => {
    const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(
        location
    )}&key=${GOOGLE_PLACES_API_KEY}`;

    try {
        const response = await axios.get(url);
        if (response.data.results.length > 0) {
            return response.data.results[0].formatted_address; // Correct extraction
        }
    } catch (error) {
        console.error("Google Places API Error:", error.response?.data || error.message);
    }
    return location; // Fallback to original if no result
};


// Helper function to convert time zones
const getTimeZone = async (location) => {
    const url = `https://maps.googleapis.com/maps/api/timezone/json?location=${encodeURIComponent(
        location
    )}&timestamp=${Math.floor(Date.now() / 1000)}&key=${GOOGLE_PLACES_API_KEY}`;

    try {
        const response = await axios.get(url);
        return response.data.timeZoneId || "UTC"; // Fallback to UTC
    } catch (error) {
        console.error("Google Time Zone API Error:", error.response?.data || error.message);
        return "UTC";
    }
};

const convertTimeZone = async (time, location) => {
    const timezone = await getTimeZone(location);
    return `${time} üïí (Adjusted to ${timezone})`;
};


// Helper function to convert currency
const convertCurrency = async (amount, from = "EUR", to = "USD") => {
    try {
        const url = `https://v6.exchangerate-api.com/v6/${EXCHANGE_RATE_API_KEY}/latest/${from}`;
        const response = await axios.get(url);

        if (!response.data.conversion_rates || !response.data.conversion_rates[to]) {
            throw new Error("Invalid currency conversion data received.");
        }

        const rate = response.data.conversion_rates[to];
        const convertedAmount = (amount * rate).toFixed(2);
        return `${amount} ${from} üí± (${amount} ${from} ‚âà ${convertedAmount} ${to})`;
    } catch (error) {
        console.error("Exchange Rate API Error:", error.response?.data || error.message);
        return `${amount} ${from}`; // Fallback
    }
};

const modifyMessage = async (message) => {
    let modifiedMessage = message;

    // Extract location using regex (detects places after "flying to" or "going to")
    const locationMatch = message.match(/\b(?:flying to|going to) ([A-Za-z\s]+)/i);
    if (locationMatch) {
        const location = locationMatch[1].trim();
        const locationDetails = await getLocationDetails(location);
        if (locationDetails) {
            modifiedMessage = modifiedMessage.replace(location, `${location} üìç (${locationDetails})`);
        }
    }

    // Extract time (basic regex, can be improved)
    const timeMatch = message.match(/(\d{1,2} (AM|PM) [A-Z]+)/);
    if (timeMatch) {
        const timeString = timeMatch[0];
        const adjustedTime = await convertTimeZone(timeString, "America/Los_Angeles"); // Example Timezone
        modifiedMessage = modifiedMessage.replace(timeString, adjustedTime);
    }

    // Extract currency and convert it
    const currencyMatch = message.match(/(\d+) EUR/);
    if (currencyMatch) {
        const amount = parseFloat(currencyMatch[1]);
        const convertedCurrency = await convertCurrency(amount);
        modifiedMessage = modifiedMessage.replace(`${amount} EUR`, convertedCurrency);
    }

    return modifiedMessage;
};
